import { MessageEmbed, TextChannel } from "discord.js";
import { DiscordQuizEvent } from "./interfaces";

export class DiscordQuiz<T = any> {

    answerTime = 10000;
    reactionNames: string[];

    constructor (
        private question: string,
        private answers: any[],
        private answerDisplayFn?: (answer: any) => string)
    {
        this.reactionNames = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü'];
    }

    async sendQuiz(channel: TextChannel, quizParticipantId: string): Promise<DiscordQuizEvent<T>> {
        const stringifiedAnswers: string[] = this.answerDisplayFn ? this.answers.map(this.answerDisplayFn) : this.answers;

        const embded = new MessageEmbed();
        embded.setTitle(this.question);
        for (let i = 0; i < stringifiedAnswers.length; ++i) {
            embded.addField(`–û—Ç–≤–µ—Ç ${i + 1}`, stringifiedAnswers[i]);
        }
        embded.setFooter(`–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ ${this.answerTime / 1000} —Å–µ–∫`);

        return new Promise(async resolve => {
            const message = await channel.send(embded);
            stringifiedAnswers.map((item, index) => message.react(this.reactionNames[index]));
            const collectedReactions = await message.awaitReactions((reaction, user) => user.id == quizParticipantId, {max: 1, time: this.answerTime});
            message.reactions.removeAll();
            resolve({
                answers: this.answers,
                selectedAnswer: collectedReactions.size
                                ? this.answers[this.reactionNames.indexOf(collectedReactions.first().emoji.name)]
                                : null
            })
        })
    }
    
}